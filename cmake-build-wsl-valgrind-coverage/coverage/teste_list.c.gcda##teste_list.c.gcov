        -:    0:Source:/mnt/d/Info_Facultate/Semestrul_2/OOP/Lab5/Tests/teste_list.c
        -:    0:Graph:/mnt/d/Info_Facultate/Semestrul_2/OOP/Lab5/cmake-build-wsl-valgrind-coverage/CMakeFiles/Lab5.dir/Tests/teste_list.c.gcno
        -:    0:Data:/mnt/d/Info_Facultate/Semestrul_2/OOP/Lab5/cmake-build-wsl-valgrind-coverage/CMakeFiles/Lab5.dir/Tests/teste_list.c.gcda
        -:    0:Runs:1
        -:    1:#include "teste_list.h"
        -:    2:#include "../Utils/list.h"
        -:    3:#include "../Domain/medicament.h"
        -:    4:#include <string.h>
        -:    5:#include <math.h>
        -:    6:#include <assert.h>
        -:    7:
        -:    8:// functie de test pentru functia add (in lista)
function test_add called 1 returned 100% blocks executed 70%
        1:    9:void test_add()
        -:   10:{
        1:   11:	List* list = creeaza_lista();
        1:   11-block  0
call    0 returned 1
       1*:   12:	assert(list->size == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   12-block  0
call    2 never executed
        1:   13:	Medicament* m1 = creeaza_medicament(10, "Paracetamol", 5.15, 20);
        1:   13-block  0
call    0 returned 1
        1:   14:	Medicament* m2 = creeaza_medicament(11, "Ibuprofen", 17.2, 25);
call    0 returned 1
        1:   15:	Medicament* m3 = creeaza_medicament(12, "Paduden", 19.2, 10);
call    0 returned 1
        1:   16:	add(list, m1);
call    0 returned 1
        1:   17:	add(list, m2);
call    0 returned 1
        1:   18:	add(list, m3);
call    0 returned 1
        -:   19:
       1*:   20:	assert(list->size == 3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   20-block  0
call    2 never executed
       1*:   21:	assert(((Medicament*)list->elems[0])->cod == 10);
        1:   21-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   21-block  1
call    2 never executed
       1*:   22:	assert(((Medicament*)list->elems[0])->cantitate == 20);
        1:   22-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   22-block  1
call    2 never executed
       1*:   23:	assert(strcmp(((Medicament*)list->elems[0])->nume, "Paracetamol") == 0);
        1:   23-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   23-block  1
call    2 never executed
       1*:   24:	assert(fabs(((Medicament*)list->elems[0])->concentratie - 5.15) < 0.0001);
        1:   24-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   24-block  1
call    2 never executed
        -:   25:
       1*:   26:	assert(list->cap == 4);
        1:   26-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   26-block  1
call    2 never executed
        -:   27:
        1:   28:	destroy_list(list);
        1:   28-block  0
call    0 returned 1
        1:   29:}
        -:   30:
        -:   31:// functie de test pentru functia delete (in lista)
function test_delete called 1 returned 100% blocks executed 82%
        1:   32:void test_delete()
        -:   33:{
        1:   34:	List* list = creeaza_lista();
        1:   34-block  0
call    0 returned 1
       1*:   35:	assert(list->size == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   35-block  0
call    2 never executed
        -:   36:
        1:   37:	Medicament* m1 = creeaza_medicament(10, "Paracetamol", 5.15, 19);
        1:   37-block  0
call    0 returned 1
        1:   38:	Medicament* m2 = creeaza_medicament(11, "Paduden", 6.15, 22);
call    0 returned 1
        1:   39:	Medicament* m3 = creeaza_medicament(12, "Ibuprofen", 7.15, 2);
call    0 returned 1
        1:   40:	Medicament* m4 = creeaza_medicament(13, "Vitamina C", 8.15, 15);
call    0 returned 1
        1:   41:	Medicament* m5 = creeaza_medicament(14, "Sirop", 4.15, 10);
call    0 returned 1
        1:   42:	add(list, m1);
call    0 returned 1
        1:   43:	add(list, m2);
call    0 returned 1
        1:   44:	add(list, m3);
call    0 returned 1
        1:   45:	add(list, m4);
call    0 returned 1
        1:   46:	add(list, m5);
call    0 returned 1
        -:   47:
        1:   48:	delete(list, 2);
call    0 returned 1
       1*:   49:	assert(list->size == 4);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   49-block  0
call    2 never executed
       1*:   50:	assert(((Medicament*)list->elems[2])->cod == 13);
        1:   50-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   50-block  1
call    2 never executed
        5:   51:	for (int i = 0; i < list->size; i++)
        1:   51-block  0
        4:   51-block  1
        5:   51-block  2
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:   52:		if (((Medicament*)list->elems[i])->cod == 12)
        4:   52-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:   53:			assert(!1);
    %%%%%:   53-block  0
call    0 never executed
        -:   54:
        1:   55:	delete(list, 100);
        1:   55-block  0
call    0 returned 1
       1*:   56:	assert(list->size == 4);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   56-block  0
call    2 never executed
        -:   57:
        1:   58:	destroy_list(list);
        1:   58-block  0
call    0 returned 1
        1:   59:}
