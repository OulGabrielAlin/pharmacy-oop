        -:    0:Source:/mnt/d/Info_Facultate/Semestrul_2/OOP/Lab5/Utils/list.c
        -:    0:Graph:/mnt/d/Info_Facultate/Semestrul_2/OOP/Lab5/cmake-build-wsl-valgrind-coverage/CMakeFiles/Lab5.dir/Utils/list.c.gcno
        -:    0:Data:/mnt/d/Info_Facultate/Semestrul_2/OOP/Lab5/cmake-build-wsl-valgrind-coverage/CMakeFiles/Lab5.dir/Utils/list.c.gcda
        -:    0:Runs:1
        -:    1:#include "list.h"
        -:    2:#include <stdlib.h>
        -:    3:#include <stdio.h>
        -:    4:#include <string.h>
        -:    5:#include "../Domain/medicament.h"
        -:    6:
        -:    7:
        -:    8:/* Creaza un obiect de tip lista
        -:    9:*  return: o lista fara elemente
        -:   10:*/ 
function creeaza_lista called 28 returned 100% blocks executed 50%
       28:   11:List* creeaza_lista(Destructor destructor, Copiator copiator)
        -:   12:{
       28:   13:	List* list = malloc(sizeof(List));
       28:   14:	if (list == NULL)
       28:   14-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 28
        -:   15:	{
    #####:   16:		perror("Couldn't find memory");
    %%%%%:   16-block  0
call    0 never executed
    #####:   17:		return NULL;
        -:   18:	}
        -:   19:
       28:   20:	list->size = 0;
       28:   21:	list->cap = 2;
       28:   22:	list->elems = malloc(sizeof(TElem) * list->cap);
       28:   23:	if (list->elems == NULL)
       28:   23-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 28
        -:   24:	{
    #####:   25:		perror("Couldn't find memory");
    %%%%%:   25-block  0
call    0 never executed
    #####:   26:		return NULL;
        -:   27:	}
       28:   28:	list->destructor = destructor;
       28:   29:	list->copiator = copiator;
       28:   30:	return list;
       28:   30-block  0
        -:   31:}
        -:   32:
        -:   33:/* Adauga un medicament la lista
        -:   34:*  list: lista curenta
        -:   35:*  m: medicamentul adaugat
        -:   36:*/
function add called 138 returned 100% blocks executed 80%
      138:   37:void add(List* list, TElem m)
        -:   38:{
      138:   39:	if (list->size == list->cap)
      138:   39-block  0
branch  0 taken 33 (fallthrough)
branch  1 taken 105
        -:   40:	{
       33:   41:		list->cap *= 2;
       33:   42:		TElem* new_list = malloc(sizeof(TElem) * list->cap);
       33:   43:		if (new_list == NULL)
       33:   43-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 33
        -:   44:		{
    #####:   45:			perror("Couldn't allocate more memory");
    %%%%%:   45-block  0
call    0 never executed
    #####:   46:			return;
        -:   47:		}
        -:   48:
      157:   49:		for (int i = 0; i < list->size; i++)
       33:   49-block  0
      157:   49-block  1
branch  0 taken 124
branch  1 taken 33 (fallthrough)
      124:   50:			new_list[i] = list->elems[i];
      124:   50-block  0
        -:   51:
       33:   52:		free(list->elems);
       33:   53:		list->elems = new_list;
       33:   53-block  0
        -:   54:	}
        -:   55:
      138:   56:	list->elems[list->size] = m;
      138:   57:	++(list->size);
      138:   57-block  0
        -:   58:}
        -:   59:
        -:   60:/* Sterge un medicament din lista dupa pozitie
        -:   61:*  list: lista curenta
        -:   62:*  poz: pozitia data
        -:   63:*/
function delete called 15 returned 100% blocks executed 100%
       15:   64:void delete(List* list, int poz)
        -:   65:{
       15:   66:	if (poz >= list->size)
       15:   66-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 14
        1:   67:		return;
        1:   67-block  0
        -:   68:
       14:   69:	distruge_medicament(list->elems[poz]);
       14:   69-block  0
call    0 returned 14
        -:   70:
       32:   71:	for (int i = poz; i < list->size - 1; i++)
       32:   71-block  0
branch  0 taken 18
branch  1 taken 14 (fallthrough)
       18:   72:		list->elems[i] = list->elems[i + 1];
       18:   72-block  0
        -:   73:	
        -:   74:
       14:   75:	--(list->size);
       14:   75-block  0
        -:   76:}
        -:   77:
        -:   78:/* Elibereaza memoria ocupata de lista
        -:   79:*  post: lista este distrusa
        -:   80:*/
function destroy_list called 101 returned 100% blocks executed 100%
      101:   81:void destroy_list(List* list)
        -:   82:{
      409:   83:	for (int i = 0; i < list->size; i++)
      101:   83-block  0
      409:   83-block  1
branch  0 taken 308
branch  1 taken 101 (fallthrough)
      308:   84:		list->destructor(list->elems[i]);
      308:   84-block  0
call    0 returned 308
      101:   85:	free(list->elems);
      101:   86:	free(list);
      101:   87:}
        -:   88:
        -:   89:/* Copiaza (deep-copy o lista)
        -:   90: * param: list -> lista initiala
        -:   91: * return : lista noua
        -:   92: */
function copy_list called 73 returned 100% blocks executed 100%
       73:   93:List* copy_list(List* list) {
       73:   94:	List* copy = (List*)malloc(sizeof(List));
       73:   95:	copy->elems = (TElem*)malloc(sizeof(TElem) * list->cap);
      268:   96:	for (int i = 0; i < list->size; i++)
       73:   96-block  0
      268:   96-block  1
branch  0 taken 195
branch  1 taken 73 (fallthrough)
      195:   97:		copy->elems[i] = list->copiator(list->elems[i]);
      195:   97-block  0
call    0 returned 195
        -:   98:
       73:   99:	copy->size = list->size;
       73:  100:	copy->cap = list->cap;
       73:  101:	copy->destructor = list->destructor;
       73:  102:	copy->copiator = list->copiator;
       73:  103:	return copy;
       73:  103-block  0
        -:  104:}
