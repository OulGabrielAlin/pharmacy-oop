        -:    0:Source:/mnt/d/Info_Facultate/Semestrul_2/OOP/Lab5/Tests/teste_domain.c
        -:    0:Graph:/mnt/d/Info_Facultate/Semestrul_2/OOP/Lab5/cmake-build-wsl-valgrind-coverage/CMakeFiles/Lab5.dir/Tests/teste_domain.c.gcno
        -:    0:Data:/mnt/d/Info_Facultate/Semestrul_2/OOP/Lab5/cmake-build-wsl-valgrind-coverage/CMakeFiles/Lab5.dir/Tests/teste_domain.c.gcda
        -:    0:Runs:1
        -:    1:#include "teste_domain.h"
        -:    2:#include <assert.h>
        -:    3:#include "../Domain/medicament.h"
        -:    4:#include "../Validator/validator.h"
        -:    5:#include <string.h>
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:
        -:    9:// functie de test pentru creeaza_medicament
function test_medicament called 1 returned 100% blocks executed 62%
        1:   10:void test_medicament()
        -:   11:{
        1:   12:	Medicament* m = creeaza_medicament(1, "Paracetamol", 11.10, 10);
        1:   12-block  0
call    0 returned 1
        -:   13:	
        1:   14:	if (m == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   15:		return;
    %%%%%:   15-block  0
       1*:   16:	assert(m->cod == 1);
        1:   16-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   16-block  1
call    2 never executed
       1*:   17:	assert(strcmp(m->nume, "Paracetamol")  == 0);
        1:   17-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   17-block  1
call    2 never executed
       1*:   18:	assert(fabs(m->concentratie - 11.10) < 0.0001);
        1:   18-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   18-block  1
call    2 never executed
       1*:   19:	assert(m->cantitate == 10);
        1:   19-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   19-block  1
call    2 never executed
        -:   20:
        1:   21:	distruge_medicament(m);
        1:   21-block  0
call    0 returned 1
        -:   22:}
        -:   23:
        -:   24:// functie de test pentru functia valideaza
function test_validare called 1 returned 100% blocks executed 69%
        1:   25:void test_validare()
        -:   26:{
        1:   27:	char errors[200] = "";
        1:   28:	valideaza(1, "Ibuprofen", 12.3, 5, errors);
        1:   28-block  0
call    0 returned 1
       1*:   29:	assert(strlen(errors) == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   29-block  0
call    2 never executed
        -:   30:
        1:   31:	strcpy(errors, "");
        1:   32:	valideaza(-1, "Ibuprofen", 12.3, 5, errors);
        1:   32-block  0
call    0 returned 1
       1*:   33:	assert(strcmp(errors, "Codul trebuie sa aiba o valoare mai mare ca 0\n") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   33-block  0
call    2 never executed
        -:   34:
        1:   35:	strcpy(errors, "");
        1:   36:	valideaza(1, "Ibuprofen", 0, 5, errors);
        1:   36-block  0
call    0 returned 1
       1*:   37:	assert(strcmp(errors, "Concentratia trebuie sa aiba o valoare in intervalul (0, 100)\n") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   37-block  0
call    2 never executed
        -:   38:
        1:   39:	strcpy(errors, "");
        1:   40:	valideaza(1, "Ibuprofen", 12.3, -1, errors);
        1:   40-block  0
call    0 returned 1
       1*:   41:	assert(strcmp(errors, "Cantitatea trebuie sa fie un numar intreg pozitiv\n") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   41-block  0
call    2 never executed
        -:   42:
        1:   43:	strcpy(errors, "");
        1:   44:	valideaza(-1, "Ibuprofen", 100, -1, errors);
        1:   44-block  0
call    0 returned 1
       1*:   45:	assert(strcmp(errors, "Codul trebuie sa aiba o valoare mai mare ca 0\nConcentratia trebuie sa aiba o valoare in intervalul (0, 100)\nCantitatea trebuie sa fie un numar intreg pozitiv\n") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   45-block  0
call    2 never executed
        1:   46:}
