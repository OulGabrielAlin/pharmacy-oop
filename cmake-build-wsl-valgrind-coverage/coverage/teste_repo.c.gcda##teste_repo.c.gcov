        -:    0:Source:/mnt/d/Info_Facultate/Semestrul_2/OOP/Lab5/Tests/teste_repo.c
        -:    0:Graph:/mnt/d/Info_Facultate/Semestrul_2/OOP/Lab5/cmake-build-wsl-valgrind-coverage/CMakeFiles/Lab5.dir/Tests/teste_repo.c.gcno
        -:    0:Data:/mnt/d/Info_Facultate/Semestrul_2/OOP/Lab5/cmake-build-wsl-valgrind-coverage/CMakeFiles/Lab5.dir/Tests/teste_repo.c.gcda
        -:    0:Runs:1
        -:    1:#include "teste_repo.h"
        -:    2:#include "../Repository/repository.h"
        -:    3:#include "../Domain/medicament.h"
        -:    4:#include "math.h"
        -:    5:#include <assert.h>
        -:    6:#include <string.h>
        -:    7:
        -:    8:// functie de test pentru functia store (repo)
function test_store called 1 returned 100% blocks executed 61%
        1:    9:void test_store()
        -:   10:{
        1:   11:	Repo* repo = creeaza_repo();
        1:   11-block  0
call    0 returned 1
       1*:   12:	assert(repo->lista_med->size == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   12-block  0
call    2 never executed
        -:   13:
        1:   14:	Medicament* m1 = creeaza_medicament(1, "Paracetamol", 12.10, 5);
        1:   14-block  0
call    0 returned 1
        1:   15:	store(repo, m1);
call    0 returned 1
       1*:   16:	assert(((Medicament*)repo->lista_med->elems[0])->cod == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   16-block  0
call    2 never executed
       1*:   17:	assert(strcmp(((Medicament*)repo->lista_med->elems[0])->nume, "Paracetamol") == 0);
        1:   17-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   17-block  1
call    2 never executed
       1*:   18:	assert(fabs(((Medicament*)repo->lista_med->elems[0])->concentratie - 12.10) < 0.0001);
        1:   18-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   18-block  1
call    2 never executed
       1*:   19:	assert(((Medicament*)repo->lista_med->elems[0])->cantitate == 5);
        1:   19-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   19-block  1
call    2 never executed
       1*:   20:	assert(repo->lista_med->size == 1);
        1:   20-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   20-block  1
call    2 never executed
        -:   21:
        1:   22:	Medicament* m2 = creeaza_medicament(1, "Paracetamol", 12.10, 10);
        1:   22-block  0
call    0 returned 1
        1:   23:	store(repo, m2);
call    0 returned 1
       1*:   24:	assert(((Medicament*)repo->lista_med->elems[0])->cod == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   24-block  0
call    2 never executed
       1*:   25:	assert(strcmp(((Medicament*)repo->lista_med->elems[0])->nume, "Paracetamol") == 0);
        1:   25-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   25-block  1
call    2 never executed
       1*:   26:	assert(fabs(((Medicament*)repo->lista_med->elems[0])->concentratie - 12.10) < 0.0001);
        1:   26-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   26-block  1
call    2 never executed
       1*:   27:	assert(((Medicament*)repo->lista_med->elems[0])->cantitate == 15);
        1:   27-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   27-block  1
call    2 never executed
       1*:   28:	assert(repo->lista_med->size == 1);
        1:   28-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   28-block  1
call    2 never executed
        -:   29:
        1:   30:	Medicament* m3 = creeaza_medicament(2, "Ibuprofen", 5.1, 2);
        1:   30-block  0
call    0 returned 1
        1:   31:	store(repo, m3);
call    0 returned 1
       1*:   32:	assert(((Medicament*)repo->lista_med->elems[1])->cod == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   32-block  0
call    2 never executed
       1*:   33:	assert(strcmp(((Medicament*)repo->lista_med->elems[1])->nume, "Ibuprofen") == 0);
        1:   33-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   33-block  1
call    2 never executed
       1*:   34:	assert(fabs(((Medicament*)repo->lista_med->elems[1])->concentratie - 5.1) < 0.0001);
        1:   34-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   34-block  1
call    2 never executed
       1*:   35:	assert(((Medicament*)repo->lista_med->elems[1])->cantitate == 2);
        1:   35-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   35-block  1
call    2 never executed
       1*:   36:	assert(repo->lista_med->size == 2);
        1:   36-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   36-block  1
call    2 never executed
        -:   37:
        1:   38:	distruge_repo(repo);
        1:   38-block  0
call    0 returned 1
        1:   39:}
        -:   40:
        -:   41:// functie de test pentru functia update (repo)
function test_update called 1 returned 100% blocks executed 71%
        1:   42:void test_update()
        -:   43:{
        1:   44:	Repo* repo = creeaza_repo();
        1:   44-block  0
call    0 returned 1
        1:   45:	Medicament* m1 = creeaza_medicament(1, "Paracetamol", 12.1, 5);
call    0 returned 1
        1:   46:	store(repo, m1);
call    0 returned 1
       1*:   47:	assert(repo->lista_med->size == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   47-block  0
call    2 never executed
        -:   48:
        -:   49:	int status;
        1:   50:	status = update(repo, 2, "Ibuprofen", 10.9);
        1:   50-block  0
call    0 returned 1
       1*:   51:	assert(status == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   51-block  0
call    2 never executed
        -:   52:
        1:   53:	status = update(repo, 1, "Ibuprofen", 11.2);
        1:   53-block  0
call    0 returned 1
       1*:   54:	assert(status == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   54-block  0
call    2 never executed
       1*:   55:	assert(strcmp(((Medicament*)repo->lista_med->elems[0])->nume, "Ibuprofen") == 0);
        1:   55-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   55-block  1
call    2 never executed
       1*:   56:	assert(fabs(((Medicament*)repo->lista_med->elems[0])->concentratie - 11.2) < 0.0001);
        1:   56-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   56-block  1
call    2 never executed
        -:   57:
        1:   58:	distruge_repo(repo);
        1:   58-block  0
call    0 returned 1
        1:   59:}
        -:   60:
        -:   61:// functie de test pentru functia find (repo)
function test_find called 1 returned 100% blocks executed 67%
        1:   62:void test_find()
        -:   63:{
        1:   64:	Repo* repo = creeaza_repo();
        1:   64-block  0
call    0 returned 1
        1:   65:	Medicament* m1 = creeaza_medicament(101, "Paduden", 21.1, 10);
call    0 returned 1
        1:   66:	store(repo, m1);
call    0 returned 1
       1*:   67:	assert(repo->lista_med->size == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   67-block  0
call    2 never executed
        -:   68:
        -:   69:	int poz;
        1:   70:	poz = find(repo, 200);
        1:   70-block  0
call    0 returned 1
       1*:   71:	assert(poz == -1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   71-block  0
call    2 never executed
        -:   72:
        1:   73:	poz = find(repo, 101);
        1:   73-block  0
call    0 returned 1
       1*:   74:	assert(poz == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   74-block  0
call    2 never executed
       1*:   75:	assert(((Medicament*)repo->lista_med->elems[poz])->cod == 101);
        1:   75-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   75-block  1
call    2 never executed
       1*:   76:	assert(strcmp(((Medicament*)repo->lista_med->elems[poz])->nume, "Paduden") == 0);
        1:   76-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   76-block  1
call    2 never executed
       1*:   77:	assert(fabs(((Medicament*)repo->lista_med->elems[poz])->concentratie - 21.1) < 0.0001);
        1:   77-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   77-block  1
call    2 never executed
       1*:   78:	assert(((Medicament*)repo->lista_med->elems[poz])->cantitate == 10);
        1:   78-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   78-block  1
call    2 never executed
        -:   79:
        1:   80:	distruge_repo(repo);
        1:   80-block  0
call    0 returned 1
        1:   81:}
        -:   82:
        -:   83:// functie de test pentru functia erase (repo)
function test_erase called 1 returned 100% blocks executed 68%
        1:   84:void test_erase()
        -:   85:{
        1:   86:	Repo* repo = creeaza_repo();
        1:   86-block  0
call    0 returned 1
       1*:   87:	assert(repo->lista_med->size == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   87-block  0
call    2 never executed
        -:   88:
        1:   89:	Medicament* m1 = creeaza_medicament(10, "Paracetamol", 10.15, 10);
        1:   89-block  0
call    0 returned 1
        1:   90:	Medicament* m2 = creeaza_medicament(11, "Ibuprofen", 22.05, 15);
call    0 returned 1
        1:   91:	store(repo, m1);
call    0 returned 1
        1:   92:	store(repo, m2);
call    0 returned 1
       1*:   93:	assert(repo->lista_med->size == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   93-block  0
call    2 never executed
        -:   94:
        -:   95:	int status;
        1:   96:	status = erase(repo, 10);
        1:   96-block  0
call    0 returned 1
       1*:   97:	assert(status == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   97-block  0
call    2 never executed
       1*:   98:	assert(repo->lista_med->size == 1);
        1:   98-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   98-block  1
call    2 never executed
       1*:   99:	assert(((Medicament*)repo->lista_med->elems[0])->cod == 11);
        1:   99-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   99-block  1
call    2 never executed
        -:  100:
        1:  101:	status = erase(repo, 11);
        1:  101-block  0
call    0 returned 1
       1*:  102:	assert(status == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  102-block  0
call    2 never executed
       1*:  103:	assert(repo->lista_med->size == 0);
        1:  103-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  103-block  1
call    2 never executed
        -:  104:
        1:  105:	status = erase(repo, 10);
        1:  105-block  0
call    0 returned 1
       1*:  106:	assert(status == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  106-block  0
call    2 never executed
       1*:  107:	assert(repo->lista_med->size == 0);
        1:  107-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  107-block  1
call    2 never executed
        -:  108:
        1:  109:	distruge_repo(repo);
        1:  109-block  0
call    0 returned 1
        1:  110:}
