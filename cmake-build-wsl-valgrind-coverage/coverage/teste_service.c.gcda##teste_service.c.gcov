        -:    0:Source:/mnt/d/Info_Facultate/Semestrul_2/OOP/Lab5/Tests/teste_service.c
        -:    0:Graph:/mnt/d/Info_Facultate/Semestrul_2/OOP/Lab5/cmake-build-wsl-valgrind-coverage/CMakeFiles/Lab5.dir/Tests/teste_service.c.gcno
        -:    0:Data:/mnt/d/Info_Facultate/Semestrul_2/OOP/Lab5/cmake-build-wsl-valgrind-coverage/CMakeFiles/Lab5.dir/Tests/teste_service.c.gcda
        -:    0:Runs:1
        -:    1:#include "teste_service.h"
        -:    2:#include "../Repository/repository.h"
        -:    3:#include "../Controller/service.h"
        -:    4:#include "string.h"
        -:    5:#include "assert.h"
        -:    6:#include "math.h"
        -:    7:#include <stdio.h>
        -:    8:#include "../Controller/mysort.h"
        -:    9:
        -:   10:// functie de test pentru adauga_medicament (service)
function test_adauga_medicament called 1 returned 100% blocks executed 62%
        1:   11:void test_adauga_medicament()
        -:   12:{
        1:   13:	ServiceMed* service = creeaza_serviciu();
        1:   13-block  0
call    0 returned 1
       1*:   14:	assert(service->repo->lista_med->size== 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   14-block  0
call    2 never executed
        -:   15:
        1:   16:	char errors[250] = "";
        1:   17:	adauga_medicament(service, 101, "Paracetamol", 12.3, 10, errors);
        1:   17-block  0
call    0 returned 1
       1*:   18:	assert(((Medicament*)service->repo->lista_med->elems[0])->cod == 101);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   18-block  0
call    2 never executed
       1*:   19:	assert(strcmp(((Medicament*)service->repo->lista_med->elems[0])->nume, "Paracetamol") == 0);
        1:   19-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   19-block  1
call    2 never executed
       1*:   20:	assert(fabs(((Medicament*)service->repo->lista_med->elems[0])->concentratie - 12.3) < 0.0001);
        1:   20-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   20-block  1
call    2 never executed
       1*:   21:	assert(((Medicament*)service->repo->lista_med->elems[0])->cantitate == 10);
        1:   21-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   21-block  1
call    2 never executed
       1*:   22:	assert(strcmp(errors, "") == 0);
        1:   22-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   22-block  1
call    2 never executed
        -:   23:
        1:   24:	strcpy(errors, "");
        1:   25:	adauga_medicament(service, 101, "Paracetamol", 12.3, 12, errors);
        1:   25-block  0
call    0 returned 1
       1*:   26:	assert(((Medicament*)service->repo->lista_med->elems[0])->cod == 101);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   26-block  0
call    2 never executed
       1*:   27:	assert(strcmp(((Medicament*)service->repo->lista_med->elems[0])->nume, "Paracetamol") == 0);
        1:   27-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   27-block  1
call    2 never executed
       1*:   28:	assert(fabs(((Medicament*)service->repo->lista_med->elems[0])->concentratie - 12.3) < 0.0001);
        1:   28-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   28-block  1
call    2 never executed
       1*:   29:	assert(((Medicament*)service->repo->lista_med->elems[0])->cantitate == 22);
        1:   29-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   29-block  1
call    2 never executed
       1*:   30:	assert(strcmp(errors, "") == 0);
        1:   30-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   30-block  1
call    2 never executed
        -:   31:
        1:   32:	strcpy(errors, "");
        1:   33:	adauga_medicament(service, -1, "Paracetamol", 12.3, 12, errors);
        1:   33-block  0
call    0 returned 1
       1*:   34:	assert(strcmp(errors, "Codul trebuie sa aiba o valoare mai mare ca 0\n") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   34-block  0
call    2 never executed
        -:   35:
        1:   36:	strcpy(errors, "");
        1:   37:	adauga_medicament(service, 101, "Paracetamol", 100, 12, errors);
        1:   37-block  0
call    0 returned 1
       1*:   38:	assert(strcmp(errors, "Concentratia trebuie sa aiba o valoare in intervalul (0, 100)\n") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   38-block  0
call    2 never executed
        -:   39:
        1:   40:	strcpy(errors, "");
        1:   41:	adauga_medicament(service, 101, "Paracetamol", 12.3, -1, errors);
        1:   41-block  0
call    0 returned 1
       1*:   42:	assert(strcmp(errors, "Cantitatea trebuie sa fie un numar intreg pozitiv\n") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   42-block  0
call    2 never executed
        -:   43:
        1:   44:	strcpy(errors, "");
        1:   45:	adauga_medicament(service, -1, "Paracetamol", 100, -1, errors);
        1:   45-block  0
call    0 returned 1
       1*:   46:	assert(strcmp(errors, "Codul trebuie sa aiba o valoare mai mare ca 0\nConcentratia trebuie sa aiba o valoare in intervalul (0, 100)\nCantitatea trebuie sa fie un numar intreg pozitiv\n") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   46-block  0
call    2 never executed
        -:   47:
        1:   48:	strcpy(errors, "");
        1:   49:	adauga_medicament(service, -2, "", 100, -1, errors);
        1:   49-block  0
call    0 returned 1
       1*:   50:	assert(strcmp(errors, "Codul trebuie sa aiba o valoare mai mare ca 0\nConcentratia trebuie sa aiba o valoare in intervalul (0, 100)\nCantitatea trebuie sa fie un numar intreg pozitiv\nTrebuie sa introduceti un nume pentru medicament\n") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   50-block  0
call    2 never executed
        -:   51:
        1:   52:	distruge_serviciu(service);
        1:   52-block  0
call    0 returned 1
        1:   53:}
        -:   54:
        -:   55:// functie de test pentru modifica_medicament (service)
function test_modifica_medicament called 1 returned 100% blocks executed 67%
        1:   56:void test_modifica_medicament()
        -:   57:{
        1:   58:	ServiceMed* service = creeaza_serviciu();
        1:   58-block  0
call    0 returned 1
       1*:   59:	assert(service->repo->lista_med->size == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   59-block  0
call    2 never executed
        -:   60:
        1:   61:	char errors[200] = "";
        1:   62:	adauga_medicament(service, 101, "Paracetamol", 12.2, 10, errors);
        1:   62-block  0
call    0 returned 1
       1*:   63:	assert(service->repo->lista_med->size == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   63-block  0
call    2 never executed
       1*:   64:	assert(strcmp(errors, "") == 0);
        1:   64-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   64-block  1
call    2 never executed
        -:   65:
        1:   66:	strcpy(errors, "");
        1:   67:	modifica_medicament(service, 101, "Paduden", 10.99, errors);
        1:   67-block  0
call    0 returned 1
       1*:   68:	assert(strcmp(((Medicament*)service->repo->lista_med->elems[0])->nume, "Paduden") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   68-block  0
call    2 never executed
       1*:   69:	assert(fabs(((Medicament*)service->repo->lista_med->elems[0])->concentratie - 10.99) < 0.0001);
        1:   69-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   69-block  1
call    2 never executed
        -:   70:
        1:   71:	strcpy(errors, "");
        1:   72:	modifica_medicament(service, -1, "Ibuprofen", 15.1, errors);
        1:   72-block  0
call    0 returned 1
       1*:   73:	assert(strcmp(errors, "Codul trebuie sa aiba o valoare mai mare ca 0\n") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   73-block  0
call    2 never executed
        -:   74:
        1:   75:	strcpy(errors, "");
        1:   76:	modifica_medicament(service, 102, "Ibuprofen", 15.1, errors);
        1:   76-block  0
call    0 returned 1
       1*:   77:	assert(strcmp(errors, "Medicamentul cu codul dat nu exista\n") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   77-block  0
call    2 never executed
        -:   78:
        1:   79:	strcpy(errors, "");
        1:   80:	modifica_medicament(service, 101, "Ibuprofen", -1, errors);
        1:   80-block  0
call    0 returned 1
       1*:   81:	assert(strcmp(errors, "Concentratia trebuie sa aiba o valoare in intervalul (0, 100)\n") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   81-block  0
call    2 never executed
        -:   82:
        1:   83:	strcpy(errors, "");
        1:   84:	modifica_medicament(service, -1, "Ibuprofen", -1, errors);
        1:   84-block  0
call    0 returned 1
       1*:   85:	assert(strcmp(errors, "Codul trebuie sa aiba o valoare mai mare ca 0\nConcentratia trebuie sa aiba o valoare in intervalul (0, 100)\n") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   85-block  0
call    2 never executed
        -:   86:
        1:   87:	distruge_serviciu(service);
        1:   87-block  0
call    0 returned 1
        1:   88:}
        -:   89:
        -:   90:// functie de test pentru sterge_medicament (service)
function test_sterge_medicament called 1 returned 100% blocks executed 64%
        1:   91:void test_sterge_medicament()
        -:   92:{
        1:   93:	ServiceMed* service = creeaza_serviciu();
        1:   93-block  0
call    0 returned 1
       1*:   94:	assert(service->repo->lista_med->size == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   94-block  0
call    2 never executed
        -:   95:
        1:   96:	char errors[200] = "";
        1:   97:	adauga_medicament(service, 10, "Paracetamol", 12.1, 10, errors);
        1:   97-block  0
call    0 returned 1
        1:   98:	adauga_medicament(service, 11, "Ibuprofen", 10.1, 12, errors);
call    0 returned 1
       1*:   99:	assert(strlen(errors) == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   99-block  0
call    2 never executed
       1*:  100:	assert(service->repo->lista_med->size == 2);
        1:  100-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  100-block  1
call    2 never executed
        -:  101:
        -:  102:	int status;
        1:  103:	status = sterge_medicament(service, 10);
        1:  103-block  0
call    0 returned 1
       1*:  104:	assert(status == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  104-block  0
call    2 never executed
       1*:  105:	assert(service->repo->lista_med->size == 1);
        1:  105-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  105-block  1
call    2 never executed
       1*:  106:	assert(((Medicament*)service->repo->lista_med->elems[0])->cod == 11);
        1:  106-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  106-block  1
call    2 never executed
        -:  107:
        1:  108:	status = sterge_medicament(service, 11);
        1:  108-block  0
call    0 returned 1
       1*:  109:	assert(status == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  109-block  0
call    2 never executed
       1*:  110:	assert(service->repo->lista_med->size == 0);
        1:  110-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  110-block  1
call    2 never executed
        -:  111:
        1:  112:	status = sterge_medicament(service, 10);
        1:  112-block  0
call    0 returned 1
       1*:  113:	assert(status == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  113-block  0
call    2 never executed
       1*:  114:	assert(service->repo->lista_med->size == 0);
        1:  114-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  114-block  1
call    2 never executed
        -:  115:
        1:  116:	distruge_serviciu(service);
        1:  116-block  0
call    0 returned 1
        1:  117:}
        -:  118:
        -:  119:// functie de test pentru sorteaza_medicamente (service)
function test_sorteaza_medicamente called 1 returned 100% blocks executed 72%
        1:  120:void test_sorteaza_medicamente()
        -:  121:{
        1:  122:	ServiceMed* service = creeaza_serviciu();
        1:  122-block  0
call    0 returned 1
        -:  123:
        1:  124:	char errors[] = "";
        1:  125:	adauga_medicament(service, 11, "b", 12.1, 5, errors);
call    0 returned 1
        1:  126:	adauga_medicament(service, 12, "c", 12.1, 2, errors);
call    0 returned 1
        1:  127:	adauga_medicament(service, 13, "a", 12.1, 6, errors);
call    0 returned 1
        1:  128:	adauga_medicament(service, 14, "e", 12.1, 1, errors);
call    0 returned 1
        1:  129:	adauga_medicament(service, 15, "b", 12.1, 9, errors);
call    0 returned 1
        1:  130:	adauga_medicament(service, 16, "c", 12.1, 10, errors);
call    0 returned 1
        1:  131:	adauga_medicament(service, 17, "a", 12.1, 2, errors);
call    0 returned 1
       1*:  132:	assert(strlen(errors) == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  132-block  0
call    2 never executed
        -:  133:
        1:  134:	sorteaza_medicamente(service, 1);
        1:  134-block  0
call    0 returned 1
       1*:  135:	assert(((Medicament*)service->repo->lista_med->elems[0])->cod == 17);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  135-block  0
call    2 never executed
       1*:  136:	assert(((Medicament*)service->repo->lista_med->elems[1])->cod == 13);
        1:  136-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  136-block  1
call    2 never executed
       1*:  137:	assert(((Medicament*)service->repo->lista_med->elems[2])->cod == 11);
        1:  137-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  137-block  1
call    2 never executed
       1*:  138:	assert(((Medicament*)service->repo->lista_med->elems[3])->cod == 15);
        1:  138-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  138-block  1
call    2 never executed
       1*:  139:	assert(((Medicament*)service->repo->lista_med->elems[4])->cod == 12);
        1:  139-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  139-block  1
call    2 never executed
       1*:  140:	assert(((Medicament*)service->repo->lista_med->elems[5])->cod == 16);
        1:  140-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  140-block  1
call    2 never executed
       1*:  141:	assert(((Medicament*)service->repo->lista_med->elems[6])->cod == 14);
        1:  141-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  141-block  1
call    2 never executed
        -:  142:
        1:  143:	sterge_medicament(service, 11);
        1:  143-block  0
call    0 returned 1
        1:  144:	sterge_medicament(service, 12);
call    0 returned 1
        1:  145:	sterge_medicament(service, 13);
call    0 returned 1
        1:  146:	sterge_medicament(service, 14);
call    0 returned 1
        1:  147:	sterge_medicament(service, 15);
call    0 returned 1
        1:  148:	sterge_medicament(service, 16);
call    0 returned 1
        1:  149:	sterge_medicament(service, 17);
call    0 returned 1
       1*:  150:	assert(service->repo->lista_med->size == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  150-block  0
call    2 never executed
        -:  151:
        1:  152:	adauga_medicament(service, 11, "b", 12.1, 5, errors);
        1:  152-block  0
call    0 returned 1
        1:  153:	adauga_medicament(service, 12, "c", 12.1, 2, errors);
call    0 returned 1
        1:  154:	adauga_medicament(service, 13, "a", 12.1, 6, errors);
call    0 returned 1
        1:  155:	adauga_medicament(service, 14, "e", 12.1, 1, errors);
call    0 returned 1
        1:  156:	adauga_medicament(service, 15, "b", 12.1, 9, errors);
call    0 returned 1
        1:  157:	adauga_medicament(service, 16, "c", 12.1, 10, errors);
call    0 returned 1
        1:  158:	adauga_medicament(service, 17, "a", 12.1, 2, errors);
call    0 returned 1
       1*:  159:	assert(strlen(errors) == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  159-block  0
call    2 never executed
        -:  160:
        1:  161:	sorteaza_medicamente(service, 0);
        1:  161-block  0
call    0 returned 1
       1*:  162:	assert(((Medicament*)service->repo->lista_med->elems[0])->cod == 14);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  162-block  0
call    2 never executed
       1*:  163:	assert(((Medicament*)service->repo->lista_med->elems[1])->cod == 16);
        1:  163-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  163-block  1
call    2 never executed
       1*:  164:	assert(((Medicament*)service->repo->lista_med->elems[2])->cod == 12);
        1:  164-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  164-block  1
call    2 never executed
       1*:  165:	assert(((Medicament*)service->repo->lista_med->elems[3])->cod == 15);
        1:  165-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  165-block  1
call    2 never executed
       1*:  166:	assert(((Medicament*)service->repo->lista_med->elems[4])->cod == 11);
        1:  166-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  166-block  1
call    2 never executed
       1*:  167:	assert(((Medicament*)service->repo->lista_med->elems[5])->cod == 13);
        1:  167-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  167-block  1
call    2 never executed
       1*:  168:	assert(((Medicament*)service->repo->lista_med->elems[6])->cod == 17);
        1:  168-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  168-block  1
call    2 never executed
        -:  169:
        1:  170:	distruge_serviciu(service);
        1:  170-block  0
call    0 returned 1
        1:  171:}
        -:  172:
        -:  173:// functie de test pentru filtreaza_dupa_cantitate (service)
function test_filtreaza_dupa_cantitate called 1 returned 100% blocks executed 79%
        1:  174:void test_filtreaza_dupa_cantitate()
        -:  175:{
        1:  176:	ServiceMed* service = creeaza_serviciu();
        1:  176-block  0
call    0 returned 1
        -:  177:
        1:  178:	List* list = creeaza_lista();
call    0 returned 1
        1:  179:	char errors[] = "";
        1:  180:	adauga_medicament(service, 11, "Algocalmin", 12.1, 10, errors);
call    0 returned 1
        1:  181:	adauga_medicament(service, 12, "Paracetamol", 15.2, 4, errors);
call    0 returned 1
        1:  182:	adauga_medicament(service, 13, "Omeprazol", 19.2, 20, errors);
call    0 returned 1
        1:  183:	adauga_medicament(service, 14, "Amoxicilina", 20.1, 12, errors);
call    0 returned 1
        1:  184:	adauga_medicament(service, 15, "Diazepam", 13.2, 5, errors);
call    0 returned 1
       1*:  185:	assert(strlen(errors) == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  185-block  0
call    2 never executed
        -:  186:
        1:  187:	filtreaza_dupa_cantitate(service, list, 10);
        1:  187-block  0
call    0 returned 1
       1*:  188:	assert(list->size == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  188-block  0
call    2 never executed
       1*:  189:	assert(((Medicament*)list->elems[0])->cod == 12);
        1:  189-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  189-block  1
call    2 never executed
       1*:  190:	assert(((Medicament*)list->elems[1])->cod == 15);
        1:  190-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  190-block  1
call    2 never executed
        -:  191:
        1:  192:	destroy_list(list);
        1:  192-block  0
call    0 returned 1
        1:  193:	distruge_serviciu(service);
call    0 returned 1
        1:  194:}
        -:  195:
        -:  196:// functie de test pentru filtreaza_dupa_nume (service)
function test_filtreaza_dupa_nume called 1 returned 100% blocks executed 79%
        1:  197:void test_filtreaza_dupa_nume()
        -:  198:{
        1:  199:	ServiceMed* service = creeaza_serviciu();
        1:  199-block  0
call    0 returned 1
        -:  200:
        1:  201:	List* list = creeaza_lista();
call    0 returned 1
        1:  202:	char errors[] = "";
        1:  203:	adauga_medicament(service, 11, "Algocalmin", 12.1, 10, errors);
call    0 returned 1
        1:  204:	adauga_medicament(service, 12, "Paracetamol", 15.2, 4, errors);
call    0 returned 1
        1:  205:	adauga_medicament(service, 13, "Omeprazol", 19.2, 20, errors);
call    0 returned 1
        1:  206:	adauga_medicament(service, 14, "Amoxicilina", 20.1, 12, errors);
call    0 returned 1
        1:  207:	adauga_medicament(service, 15, "Prednison", 13.2, 5, errors);
call    0 returned 1
       1*:  208:	assert(strlen(errors) == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  208-block  0
call    2 never executed
        -:  209:
        1:  210:	filtreaza_dupa_nume(service, list, 'P');
        1:  210-block  0
call    0 returned 1
       1*:  211:	assert(list->size == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  211-block  0
call    2 never executed
       1*:  212:	assert(((Medicament*)list->elems[0])->cod == 12);
        1:  212-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  212-block  1
call    2 never executed
       1*:  213:	assert(((Medicament*)list->elems[1])->cod == 15);
        1:  213-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  213-block  1
call    2 never executed
        -:  214:
        1:  215:	destroy_list(list);
        1:  215-block  0
call    0 returned 1
        1:  216:	distruge_serviciu(service);
call    0 returned 1
        1:  217:}
